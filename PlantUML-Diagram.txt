@startuml
abstract class bankteller.Account {

#bankteller.Profile holder
#boolean closed
#double balance

+boolean equals(Object o)
+String toString()

+void withdraw(double amount)
+void deposit(double amount)
+void changeState()
+void setBalance()
+bankteller.Profile getHolder()
+{abstract} double monthlyInterest()
+{abstract} double fee()
+{abstract} String getType()
}

class bankteller.Checking {

+double monthlyInterest()
+double fee()
+String getType()

}

class bankteller.CollegeChecking {

+String getCampus()
+int getCode()
+void changeCampus(int campusCode)
+String toString()
+double monthlyInterest()
+double fee()
+String getType()

}


class bankteller.Savings {

+void changeLoyalty(int loyalty)
+void getLoyalty()
+String isLoyal()
+String toString()
+double monthlyInterest()
+double fee()
+String getType()

}


class bankteller.MoneyMarket {

+void addWithdrawal()
+int getWithdrawals()
+String toString()
+double monthlyInterest()
+double fee()
+String getType()

}

class bankteller.Profile {

-String fname
-String lname
-bankteller.Date dob

+boolean equals(Object obj)
+String toString()
}

class bankteller.AccountDatabase {

-bankteller.Account[] accounts
-int numAcct
-{static} int NOT_FOUND = -1
-{static} int HAS_CHECKING = -2
-{static} DecimalFormat df

-int find(bankteller.Account acccount)
-int findChecking(bankteller.Account account)
-void grow()

+boolean open(bankteller.Account account)
+boolean close(bankteller.Account account)
+void deposit(bankteller.Account account)
+boolean withdraw(bankteller.Account account)
+void print()
+void sortType(Accounts[] accounts)
+void printByAccountType()
+void printFeeAndInterest()
+void update()
}

class bankteller.BankTeller {

+void run()
-{static} void oCommand(String input, bankteller.AccountDatabase database)
-{static} void cCommand(String input, bankteller.AccountDatabase database)
-{static} void dCommand(String input, bankteller.AccountDatabase database)
-{static} void wCommand(String input, bankteller.AccountDatabase database)
-{static} void pCommand(bankteller.AccountDatabase database)
-{static} void ptCommand(bankteller.AccountDatabase database)
-{static} void piCommand(bankteller.AccountDatabase database)
-{static} void ubCommand(bankteller.AccountDatabase database)
+{static} boolean dateChecker(bankteller.Date dob)
}

class RunProject2 {

+void main()
}

class bankteller.Date {

-int year
-int month
-int day

+int compareTo(bankteller.Date date)
+String toString()
+boolean isValid()
+boolean inArray(int[] arr, int valueToCheck)
+boolean isLeapYear(int year)
+boolean isThirtyOne(int month)
+boolean isThirty(int month)
}

RunProject2 -- bankteller.BankTeller : uses >
bankteller.BankTeller -- bankteller.AccountDatabase : uses >
bankteller.AccountDatabase "0..n" o-- "1" bankteller.Account
bankteller.Account <|-- bankteller.Checking
bankteller.Account <|-- bankteller.Savings
bankteller.Checking <|-- bankteller.CollegeChecking
bankteller.Savings <|-- bankteller.MoneyMarket
bankteller.Account "0..4" o-- "1" bankteller.Profile
bankteller.Date <-- bankteller.Profile
@enduml
